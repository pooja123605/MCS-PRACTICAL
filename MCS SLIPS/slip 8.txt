Slip 8 neo4j 
Model the following Doctor’s information system as a graph model, and answer the following queries using Cypher.
Consider the doctors in and around Pune. Each Doctor is specialized in some stream like Pediatric, Gynaec, Heart Specialist, Cancer Specialist, ENT, etc. 
A doctor may be a visiting doctor across many hospitals or he may own a clinic. 
A person can provide a review/can recommend a doctor.

1.	Identify the labels and relationships, along with their properties, and draw a Graph model.
2.	Create nodes and relationships, along with their properties, and visualize your actual Graph model. 
3.	Answer the Queries
a.	List the Pediatric doctors in Camp Area. 
b.	List the doctors who own a clinic. 
c.	List the most recommended Gynaec in Kothrud. 
d.      List all the reviews for “Dr. Kulkarni”. 


create(jehangir:Hospital{name:'Jehangir Hospital'}) 
create(patil:Hospital{name:'Patil Hospital'}) 
create(sanjivani:Hospital{name:'Sanjivani Hospital'}) 
create(astha:Hospital{name:'Astha Hospital'}) 
create(poona:Hospital{name:'Poona Hospital'}) 
create(kothrud:Hospital{name:'Kothrud Hospital'}) 
create(saideep:Hospital{name:'Saideep Hospital'})

create(dclinic:Clinic{name:'Disha Clinic'})
create(nclinic:Clinic{name:'Niramay Clinic'})

create(drrustam:Doctor{name:'Dr. Rustam',specializations:'Pediatric',work_area:'Camp'}) 
create(drasthana:Doctor{name:'Dr. Asthana',specializations:'Gynaec',work_area:'Kothrud'})
create(drkale:Doctor{name:'Dr. Kale',specializations:'Orthopaedic',work_area:'Pimpri'}) 
create(drrusy:Doctor{name:'Dr. Rusy',specializations:'Gynaec',work_area:'Kothrud'}) 
create(drram:Doctor{name:'Dr. Ram',specializations:'Pediatric',work_area:'Camp'}) 
create(drkulkarni:Doctor{name:'Dr. Kulkarni',specializations:'Pediatric',work_area:'Kothrud'})

create(drrustam)-[:visit]->(jehangir) 
create(drasthana)-[:visit]->(patil) 
create(drkale)-[:visit]->(sanjivani) 
create(drrusy)-[:visit]->(astha) 
create(drram)-[:visit]->(poona) 

create(drkale)-[:owns]->(nclinic)
create(drkulkarni)-[:owns]->(dclinic)

create(ram:people{name:'Ram'}) 
create(sham:people{name:'Sham'}) 
create(raj:people{name:'Raj'}) 
create(ravi:people{name:'Ravi'})


create(ram)-[:recommend]->(drrusy) 
create(sham)-[:recommend]->(drrusy) 
create(raj)-[:recommend]->(drasthana) 
create(ravi)-[:recommend]->(drkulkarni)
create(sham)-[:recommend]->(drkale) 

create(ram)-[:reviews {review:'very friendly and helpful'}]->(drrustam) 
create(sham)-[:reviews {review:'excellent treatment'}]->(drram) 
create(raj)-[:reviews {review:'excellent service'}]->(drkulkarni) 
create(ravi)-[:reviews {review:'helpful and kind'}]->(drkulkarni)
create(ravi)-[:reviews {review:'very understanding'}]->(drkale)

Solution for the Queries

a. List the Pediatric doctors in Camp Area.
match(d:Doctor{work_area:'Camp', specializations:'Pediatric'}) 
return d.name

b. List the doctors who own a clinic.
match(d:Doctor)-[:owns]->(c:Clinic)
return d.name

c. List the most recommended Gynaec in Kothrud
match(p:people)-[:recommend]->(d:Doctor) 
where d.specializations='Gynaec' and d.work_area='Kothrud'
return d.name,count(*) 
order by count(*) desc limit 1

d. List all the reviews for “Dr. Kulkarni”.
match(p:people)-[r:reviews]->(d:Doctor{name:'Dr. Kulkarni'}) 
return r.review